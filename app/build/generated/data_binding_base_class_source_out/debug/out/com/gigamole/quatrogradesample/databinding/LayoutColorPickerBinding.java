// Generated by view binder compiler. Do not edit!
package com.gigamole.quatrogradesample.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.helper.widget.Flow;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import codes.side.andcolorpicker.alpha.HSLAlphaColorPickerSeekBar;
import codes.side.andcolorpicker.hsl.HSLColorPickerSeekBar;
import com.gigamole.quatrogradesample.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutColorPickerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final HSLAlphaColorPickerSeekBar colorPickerAlphaSeekBar;

  @NonNull
  public final MaterialButton colorPickerButtonRandomColor;

  @NonNull
  public final Flow colorPickerFlow;

  @NonNull
  public final HSLColorPickerSeekBar colorPickerHueSeekBar;

  @NonNull
  public final HSLColorPickerSeekBar colorPickerLightnessSeekBar;

  @NonNull
  public final HSLColorPickerSeekBar colorPickerSaturationSeekBar;

  private LayoutColorPickerBinding(@NonNull ConstraintLayout rootView,
      @NonNull HSLAlphaColorPickerSeekBar colorPickerAlphaSeekBar,
      @NonNull MaterialButton colorPickerButtonRandomColor, @NonNull Flow colorPickerFlow,
      @NonNull HSLColorPickerSeekBar colorPickerHueSeekBar,
      @NonNull HSLColorPickerSeekBar colorPickerLightnessSeekBar,
      @NonNull HSLColorPickerSeekBar colorPickerSaturationSeekBar) {
    this.rootView = rootView;
    this.colorPickerAlphaSeekBar = colorPickerAlphaSeekBar;
    this.colorPickerButtonRandomColor = colorPickerButtonRandomColor;
    this.colorPickerFlow = colorPickerFlow;
    this.colorPickerHueSeekBar = colorPickerHueSeekBar;
    this.colorPickerLightnessSeekBar = colorPickerLightnessSeekBar;
    this.colorPickerSaturationSeekBar = colorPickerSaturationSeekBar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutColorPickerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutColorPickerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_color_picker, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutColorPickerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.color_picker_alpha_seek_bar;
      HSLAlphaColorPickerSeekBar colorPickerAlphaSeekBar = rootView.findViewById(id);
      if (colorPickerAlphaSeekBar == null) {
        break missingId;
      }

      id = R.id.color_picker_button_random_color;
      MaterialButton colorPickerButtonRandomColor = rootView.findViewById(id);
      if (colorPickerButtonRandomColor == null) {
        break missingId;
      }

      id = R.id.color_picker_flow;
      Flow colorPickerFlow = rootView.findViewById(id);
      if (colorPickerFlow == null) {
        break missingId;
      }

      id = R.id.color_picker_hue_seek_bar;
      HSLColorPickerSeekBar colorPickerHueSeekBar = rootView.findViewById(id);
      if (colorPickerHueSeekBar == null) {
        break missingId;
      }

      id = R.id.color_picker_lightness_seek_bar;
      HSLColorPickerSeekBar colorPickerLightnessSeekBar = rootView.findViewById(id);
      if (colorPickerLightnessSeekBar == null) {
        break missingId;
      }

      id = R.id.color_picker_saturation_seek_bar;
      HSLColorPickerSeekBar colorPickerSaturationSeekBar = rootView.findViewById(id);
      if (colorPickerSaturationSeekBar == null) {
        break missingId;
      }

      return new LayoutColorPickerBinding((ConstraintLayout) rootView, colorPickerAlphaSeekBar,
          colorPickerButtonRandomColor, colorPickerFlow, colorPickerHueSeekBar,
          colorPickerLightnessSeekBar, colorPickerSaturationSeekBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
